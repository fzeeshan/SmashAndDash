<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_keyboard_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dragable = false;
global.selected_text = noone;
/// Initialize (costumize to your liking)
/*

  This on screen keyboard edits the keyboard_string variable directly
  so it can be used parallel to a physical keyboard.
  
  You can modify the keyboard in this event. Everything should be commented
  and easy to follow. Things marked INTERNAL should not need to be changed.
  
  This object is made by Mikael Norrgard of GamePhase
  http://www.gamephase.net/
  
  You can use this object in any game you make. If you end up using this
  object I would love to hear about it! :)

*/
// Text color for text on keys
text_color = make_color_rgb(183,183,183);

// Set font used for drawing text on keys
draw_set_font(fnt);

// Key press sound (set to -1 for no sound)
sound_key_press = snd_keypress;

// Haptic effect (set to -1 for no haptic effect)
haptic_effect = 46;

// The default key sprite
spr_default = spr_key_normal;

// The space between keys
key_space_x = 3;
key_space_y = 3;

// You need to adjust the offset for characters depending on which font you use
char_offset_x = 16;
char_offset_y = 18;

// Key repeat, should key be repeated when being held down
key_repeat = true;
// Key repeat delays (when holding a key pressed)
key_repeat_initial_delay = 18;
key_repeat_delay = 5;

// Auto shift? If true, shift will be automatically enabled when keyboard is created and after interpunction
auto_shift = true;

// Shift for one key? If true, shift will be inactivated after used for one keypress
shift_once = true;

// Shift key position
key_shift_row = 4;
key_shift_col = 0;

// Number of rows
keyboard_rows = 5;

// Number of keys for every row
row_keys[0] = 13;
row_keys[1] = 13;
row_keys[2] = 10;
row_keys[3] = 11;
row_keys[4] = 2;

// X offset for every row 
row_xoffset[0] = 0;
row_xoffset[1] = 3;
row_xoffset[2] = 10;
row_xoffset[3] = 16;
row_xoffset[4] = 22;

// INTERNAL: Set default values for all keys
event_user(0);

// Keys with special sprites (set sprite and width)
key_spr[0,12] = spr_key_wide;
key_spr[2,9] = spr_key_enter;
key_spr[4,0] = spr_key_wide;
key_spr[4,1] = spr_key_space;
key_w[0,12] = sprite_get_width(key_spr[0,12]);
key_w[2,9] = sprite_get_width(key_spr[2,9]);
key_w[4,0] = sprite_get_width(key_spr[4,0]);
key_w[4,1] = sprite_get_width(key_spr[4,1]);


// Characters for first row
key_char[0,0] = '1';
key_char[0,1] = '2';
key_char[0,2] = '3';
key_char[0,3] = '4';
key_char[0,4] = '5';
key_char[0,5] = '6';
key_char[0,6] = '7';
key_char[0,7] = '8';
key_char[0,8] = '9';
key_char[0,9] = '0';
key_char[0,10] = '-';
key_char[0,11] = '+';
key_char[0,12]= "Backspace";
// Characters for second row
key_char[1,0] = 'q';
key_char[1,1] = 'w';
key_char[1,2] = 'e';
key_char[1,3] = 'r';
key_char[1,4] = 't';
key_char[1,5] = 'y';
key_char[1,6] = 'u';
key_char[1,7] = 'i';
key_char[1,8] = 'o';
key_char[1,9] = 'p';
key_char[1,10] = '{';
key_char[1,11] = '}';
key_char[1,12] = '@';
// Characters for third row
key_char[2,0] = 'a';
key_char[2,1] = 's';
key_char[2,2] = 'd';
key_char[2,3] = 'f';
key_char[2,4] = 'g';
key_char[2,5] = 'h';
key_char[2,6] = 'j';
key_char[2,7] = 'k';
key_char[2,8] = 'l';
key_char[2,9] = 'Enter';
// Characters for fourth row
key_char[3,0] = 'z';
key_char[3,1] = 'x';
key_char[3,2] = 'c';
key_char[3,3] = 'v';
key_char[3,4] = 'b';
key_char[3,5] = 'n';
key_char[3,6] = 'm';
key_char[3,7] = ',';
key_char[3,8] = '.';
key_char[3,9] = ':';
key_char[3,10]= '/';
// Characters for fifth row
key_char[4,0] = 'Shift';
key_char[4,1] = ' ';

// Define a sprite for certain keys
key_char_spr[0,12]= spr_backspace;
key_char_spr[2,9] = spr_enter;
key_char_spr[4,0] = spr_shift;

// INTERNAL: Set x- and y-positions and default shift chars for keys at this point
event_user(1);
    
// Set chars for the keys you want to shift
// Shift characters for first row
key_char_shift[0,0] = '!';
key_char_shift[0,1] = '"';
key_char_shift[0,2] = 'Â£';
key_char_shift[0,3] = '$';
key_char_shift[0,4] = '%';
key_char_shift[0,5] = '^';
key_char_shift[0,6] = '&amp;';
key_char_shift[0,7] = '*';
key_char_shift[0,8] = '(';
key_char_shift[0,9] = ')';
key_char_shift[0,10]= '\#';
key_char_shift[0,11]= '=';
// Shift characters for second row
key_char_shift[1,0] = 'Q';
key_char_shift[1,1] = 'W';
key_char_shift[1,2] = 'E';
key_char_shift[1,3] = 'R';
key_char_shift[1,4] = 'T';
key_char_shift[1,5] = 'Y';
key_char_shift[1,6] = 'U';
key_char_shift[1,7] = 'I';
key_char_shift[1,8] = 'O';
key_char_shift[1,9] = 'P';
key_char_shift[1,10]= '[';
key_char_shift[1,11]= ']';
key_char_shift[1,12] = "'";
// Shift characters for third row
key_char_shift[2,0] = 'A';
key_char_shift[2,1] = 'S';
key_char_shift[2,2] = 'D';
key_char_shift[2,3] = 'F';
key_char_shift[2,4] = 'G';
key_char_shift[2,5] = 'H';
key_char_shift[2,6] = 'J';
key_char_shift[2,7] = 'K';
key_char_shift[2,8] = 'L';
// Shift characters for forth row
key_char_shift[3,0] = 'Z';
key_char_shift[3,1] = 'X';
key_char_shift[3,2] = 'C';
key_char_shift[3,3] = 'V';
key_char_shift[3,4] = 'B';
key_char_shift[3,5] = 'N';
key_char_shift[3,6] = 'M';
key_char_shift[3,7] = '&lt;';
key_char_shift[3,8] = '&gt;';
key_char_shift[3,9] = ';';
key_char_shift[3,10]= '?';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Repeat key press
if(key_held)
{
  key_pressed = true;
  alarm[0] = key_repeat_delay;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle key presses
if dragable{
    sprite_index =spr_keyboard_bg_dragging;
}else{
    sprite_index =spr_keyboard_bg;    
}
// Only handle when visible, it's better to show and hide the keyboard instead
// of creating a new one every time you need it.
if(visible and !dragable)
{
  // Check for multitouch press
  var mouse_pressed = -1;
  for(var device=0; device&lt;=4; device++)
    if(device_mouse_check_button_pressed(device, mb_left))
    {
      mouse_pressed = device;
      break;
    }

  // Check if any key is pressed
  if(mouse_pressed &gt;= 0)
  { 
    // Get keyboard row
    var row = floor((device_mouse_y(mouse_pressed)-y)/(key_height+key_space_y));
  
    // Check if valid keyboard row
    if(row &gt;= 0 &amp;&amp; row &lt; keyboard_rows)
    {
      if(device_mouse_y(mouse_pressed) &gt; (key_y[row,0]+key_height))
        row = -1;
    }
    else
      row = -1;
      
    // If we have a valid row, continue
    if(row &gt;= 0)
    {
      // Iterate over all keys on row (break if key pressed)
      for(var xx=0; xx&lt;row_keys[row]; xx++)
      {
        // Check if current key is pressed
        if(device_mouse_x(mouse_pressed)&gt;=key_x[row,xx] &amp;&amp; device_mouse_x(mouse_pressed)&lt;(key_x[row,xx]+key_w[row,xx])) 
        {
          m_row = row;
          m_col = xx;
          key_pressed = true;
          key_held = true;
          if(key_repeat)
            alarm[0] = key_repeat_initial_delay;
          break;
        }
      }
    }
  }
  
  // Key is pressed (or repeated)
  if(key_pressed)
  {
    /*if obj_textbox_username.selected{
        obj_textbox_username.txt = keyboard_string;
    }
    if obj_textbox_password1.selected{
        obj_textbox_password1.txt = keyboard_string;
    }
    if obj_textbox_password2.selected{
        obj_textbox_password2.txt = keyboard_string;
    }*/
      if global.selected_text.selected{
        global.selected_text.txt = keyboard_string;
    }  

    
    // Play sound
    if(sound_key_press != -1)
      audio_play_sound(sound_key_press,1,false);
      
    // Haptic effect
    if(haptic_effect != -1)
      immersion_play_effect(haptic_effect);
    
    // If key has only one character, add it to the text variable
    if(string_length(key_char[m_row,m_col]) == 1) {
      var char;
      if(shift)
        char = key_char_shift[m_row,m_col];
      else
        char = key_char[m_row,m_col];
      keyboard_string += char;
      if(auto_shift)
      {
        if(char == '.')
          auto_shift_started = true;
        else if(auto_shift_started &amp;&amp; char == ' ')
        {
          auto_shift_started = false;
          shift = true;
          auto_shifted = true;
        }
        else if(auto_shifted &amp;&amp; char != ' ')
        {
          shift = false;
          auto_shifted = false;
        }
        else
          auto_shift_started = false;
      }
      if(shift_once &amp;&amp; shift &amp;&amp; !auto_shifted)
        shift = false;
    }
    

    // Otherwise do something special (enter, backspace etc.)
    else if(m_row == key_shift_row &amp;&amp; m_col == key_shift_col)
      shift = !shift;
    else
    {
      switch(key_char[m_row,m_col])
      {
        // Add a new line symbol when ENTER is pressed
        case "Enter":
          keyboard_string += "#";
          break;
        // Delete last character of text if backspace is pressed
        case "Backspace":
          var len = string_length(keyboard_string);
          if(len &gt; 0)
            keyboard_string = string_delete(keyboard_string, len, 1);
          // Disable auto shift on backspace
          if(auto_shifted) {
            auto_shift = false;
            shift = false;
          }
          break;
      }
    }
    key_pressed = false;
  }
  
  // Check for touch release
  if(key_held) 
  {
    // Check for multitouch release (check for any press)
    var mouse_released = true;
    for(var device=0; device&lt;=4; device++)
      if(device_mouse_check_button(device, mb_left))
      {
        mouse_released = false;
        break;
      }
  
    // Handle touch release
    if(mouse_released)
    {
      key_held = false;
      m_row = -1;
      m_col = -1;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UNDRAG
dragable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAGGING
if dragable{
    x=mouse_x;
    y=mouse_y;
    event_user(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UNDRAG
dragable = false;
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAG SWITCH
if dragable{
    dragable = false;
}else{
    dragable = true;
}
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// INTERNAL: Set default values for all keys
event_user(0);

// Keys with special sprites (set sprite and width)
key_spr[0,12] = spr_key_wide;
key_spr[2,9] = spr_key_enter;
key_spr[4,0] = spr_key_wide;
key_spr[4,1] = spr_key_space;
key_w[0,12] = sprite_get_width(key_spr[0,12]);
key_w[2,9] = sprite_get_width(key_spr[2,9]);
key_w[4,0] = sprite_get_width(key_spr[4,0]);
key_w[4,1] = sprite_get_width(key_spr[4,1]);


// Characters for first row
key_char[0,0] = '1';
key_char[0,1] = '2';
key_char[0,2] = '3';
key_char[0,3] = '4';
key_char[0,4] = '5';
key_char[0,5] = '6';
key_char[0,6] = '7';
key_char[0,7] = '8';
key_char[0,8] = '9';
key_char[0,9] = '0';
key_char[0,10] = '-';
key_char[0,11] = '+';
key_char[0,12]= "Backspace";
// Characters for second row
key_char[1,0] = 'q';
key_char[1,1] = 'w';
key_char[1,2] = 'e';
key_char[1,3] = 'r';
key_char[1,4] = 't';
key_char[1,5] = 'y';
key_char[1,6] = 'u';
key_char[1,7] = 'i';
key_char[1,8] = 'o';
key_char[1,9] = 'p';
key_char[1,10] = '{';
key_char[1,11] = '}';
key_char[1,12] = '@';
// Characters for third row
key_char[2,0] = 'a';
key_char[2,1] = 's';
key_char[2,2] = 'd';
key_char[2,3] = 'f';
key_char[2,4] = 'g';
key_char[2,5] = 'h';
key_char[2,6] = 'j';
key_char[2,7] = 'k';
key_char[2,8] = 'l';
key_char[2,9] = 'Enter';
// Characters for fourth row
key_char[3,0] = 'z';
key_char[3,1] = 'x';
key_char[3,2] = 'c';
key_char[3,3] = 'v';
key_char[3,4] = 'b';
key_char[3,5] = 'n';
key_char[3,6] = 'm';
key_char[3,7] = ',';
key_char[3,8] = '.';
key_char[3,9] = ':';
key_char[3,10]= '/';
// Characters for fifth row
key_char[4,0] = 'Shift';
key_char[4,1] = ' ';

// Define a sprite for certain keys
key_char_spr[0,12]= spr_backspace;
key_char_spr[2,9] = spr_enter;
key_char_spr[4,0] = spr_shift;

// INTERNAL: Set x- and y-positions and default shift chars for keys at this point
event_user(1);
    
// Set chars for the keys you want to shift
// Shift characters for first row
key_char_shift[0,0] = '!';
key_char_shift[0,1] = '"';
key_char_shift[0,2] = 'Â£';
key_char_shift[0,3] = '$';
key_char_shift[0,4] = '%';
key_char_shift[0,5] = '^';
key_char_shift[0,6] = '&amp;';
key_char_shift[0,7] = '*';
key_char_shift[0,8] = '(';
key_char_shift[0,9] = ')';
key_char_shift[0,10]= '\#';
key_char_shift[0,11]= '=';
// Shift characters for second row
key_char_shift[1,0] = 'Q';
key_char_shift[1,1] = 'W';
key_char_shift[1,2] = 'E';
key_char_shift[1,3] = 'R';
key_char_shift[1,4] = 'T';
key_char_shift[1,5] = 'Y';
key_char_shift[1,6] = 'U';
key_char_shift[1,7] = 'I';
key_char_shift[1,8] = 'O';
key_char_shift[1,9] = 'P';
key_char_shift[1,10]= '[';
key_char_shift[1,11]= ']';
key_char_shift[1,12] = "'";
// Shift characters for third row
key_char_shift[2,0] = 'A';
key_char_shift[2,1] = 'S';
key_char_shift[2,2] = 'D';
key_char_shift[2,3] = 'F';
key_char_shift[2,4] = 'G';
key_char_shift[2,5] = 'H';
key_char_shift[2,6] = 'J';
key_char_shift[2,7] = 'K';
key_char_shift[2,8] = 'L';
// Shift characters for forth row
key_char_shift[3,0] = 'Z';
key_char_shift[3,1] = 'X';
key_char_shift[3,2] = 'C';
key_char_shift[3,3] = 'V';
key_char_shift[3,4] = 'B';
key_char_shift[3,5] = 'N';
key_char_shift[3,6] = 'M';
key_char_shift[3,7] = '&lt;';
key_char_shift[3,8] = '&gt;';
key_char_shift[3,9] = ';';
key_char_shift[3,10]= '?';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set x-positions and default shift chars for all keys
for(yy=0; yy&lt;keyboard_rows; yy++)
{
  var xxx = x+row_xoffset[yy];
  var yyy = y+yy*key_height+yy*key_space_y;
  for(xx=0; xx&lt;row_keys[yy]; xx++)
  {
    key_x[yy,xx] = xxx+15;
    key_y[yy,xx] = yyy+5;
    // Increase x-position by width of key + key spacing
    xxx += key_w[yy,xx]+key_space_x;
  }
}

// Shift chars, set normal chars as default
for(yy=keyboard_rows-1; yy&gt;=0; yy--)
  for(xx=row_keys[yy]-1; xx&gt;=0; xx--)
    key_char_shift[yy,xx] = key_char[yy,xx];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set default values for all keys (and some internal variables)
var xx, yy;

// Internal variables
key_pressed = false;
key_held = false;
shift = false//auto_shift;
auto_shifted = false//auto_shift;
auto_shift_started = false;
m_row = -1;
m_col = -1;

// The width and height of the keys
key_width = sprite_get_width(spr_default);
key_height = sprite_get_height(spr_default);

// Default values for all keys
for(yy=keyboard_rows-1; yy&gt;=0; yy--)
{
  for(xx=row_keys[yy]-1; xx&gt;=0; xx--)
  {
    key_spr[yy,xx] = spr_default;
    key_char_spr[yy,xx] = -1;
    key_w[yy,xx] = key_width;
    key_char[yy,xx] = '1';
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Iterate over all keys and draw the sprite and text
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);

var xx, yy;
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_color(text_color);
draw_set_font(fnt);
for(yy=0; yy&lt;keyboard_rows; yy++)
{
  for(xx=0; xx&lt;row_keys[yy]; xx++)
  {
    // Check if the current key is the one being pressed, or shift key
    var index = 0;
    if(xx == m_col &amp;&amp; yy == m_row)
      index = 1;
    else if(shift &amp;&amp; xx == key_shift_col &amp;&amp; yy == key_shift_row)
      index = 1;
    
    // Shift chars or normal chars?
    var char;
    if(shift) 
      char = key_char_shift[yy,xx]; 
    else 
      char = key_char[yy,xx];
      
    // Draw key sprite
    //draw_sprite(key_spr[yy,xx], index, key_x[yy,xx], key_y[yy,xx]);
    draw_sprite_ext(key_spr[yy,xx], index, key_x[yy,xx], key_y[yy,xx],1,1,0,c_white,1);
    // Draw key char (or text)
    if(key_char_spr[yy,xx] != -1)
      draw_sprite_ext(key_char_spr[yy,xx], index, key_x[yy,xx], key_y[yy,xx], 1, 1, 0, text_color, 1);
    else
      draw_text(key_x[yy,xx]+char_offset_x, key_y[yy,xx]+char_offset_y, char);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>6,6</point>
  </PhysicsShapePoints>
</object>
